<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fc.dao.BookTypeTblMapper">
  <cache/>
  <resultMap id="BaseResultMap" type="com.fc.entity.BookTypeTbl">
    <id column="type_id" jdbcType="INTEGER" property="typeId" />
    <result column="type_name" jdbcType="VARCHAR" property="typeName" />
    <result column="toBorrow_days" jdbcType="INTEGER" property="toborrowDays" />
    <collection property="list" javaType="list" ofType="com.fc.entity.BookTbl">
      <id column="book_id" jdbcType="INTEGER" property="bookId" />
      <result column="book_name" jdbcType="VARCHAR" property="bookName" />
      <result column="type_id" jdbcType="INTEGER" property="typeId" />
      <result column="book_author" jdbcType="VARCHAR" property="bookAuthor" />
      <result column="book_press" jdbcType="VARCHAR" property="bookPress" />
      <result column="book_price" jdbcType="REAL" property="bookPrice" />
      <result column="book_language" jdbcType="VARCHAR" property="bookLanguage" />
      <result column="book_pdfURL" jdbcType="VARCHAR" property="bookPdfurl" />
      <result column="book_entry_time" jdbcType="TIMESTAMP" property="bookEntryTime" />
      <result column="toBorrow_times" jdbcType="INTEGER" property="toborrowTimes" />
      <result column="operator_id" jdbcType="INTEGER" property="operatorId" />
      <result column="borrowed_times" jdbcType="INTEGER" property="borrowedTimes" />
      <result column="book_case_id" jdbcType="INTEGER" property="bookCaseId" />
    </collection>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    type_id, type_name, toBorrow_days
  </sql>
  <select id="selectByExample" parameterType="com.fc.entity.BookTypeTblExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from book_type_tbl
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from book_type_tbl
    where type_id = #{typeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from book_type_tbl
    where type_id = #{typeId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.fc.entity.BookTypeTblExample">
    delete from book_type_tbl
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.fc.entity.BookTypeTbl">
    insert into book_type_tbl (type_id, type_name, toBorrow_days
      )
    values (#{typeId,jdbcType=INTEGER}, #{typeName,jdbcType=VARCHAR}, #{toborrowDays,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.fc.entity.BookTypeTbl">
    insert into book_type_tbl
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="typeId != null">
        type_id,
      </if>
      <if test="typeName != null">
        type_name,
      </if>
      <if test="toborrowDays != null">
        toBorrow_days,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="typeId != null">
        #{typeId,jdbcType=INTEGER},
      </if>
      <if test="typeName != null">
        #{typeName,jdbcType=VARCHAR},
      </if>
      <if test="toborrowDays != null">
        #{toborrowDays,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.fc.entity.BookTypeTblExample" resultType="java.lang.Long">
    select count(*) from book_type_tbl
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update book_type_tbl
    <set>
      <if test="record.typeId != null">
        type_id = #{record.typeId,jdbcType=INTEGER},
      </if>
      <if test="record.typeName != null">
        type_name = #{record.typeName,jdbcType=VARCHAR},
      </if>
      <if test="record.toborrowDays != null">
        toBorrow_days = #{record.toborrowDays,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update book_type_tbl
    set type_id = #{record.typeId,jdbcType=INTEGER},
      type_name = #{record.typeName,jdbcType=VARCHAR},
      toBorrow_days = #{record.toborrowDays,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.fc.entity.BookTypeTbl">
    update book_type_tbl
    <set>
      <if test="typeName != null">
        type_name = #{typeName,jdbcType=VARCHAR},
      </if>
      <if test="toborrowDays != null">
        toBorrow_days = #{toborrowDays,jdbcType=INTEGER},
      </if>
    </set>
    where type_id = #{typeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fc.entity.BookTypeTbl">
    update book_type_tbl
    set type_name = #{typeName,jdbcType=VARCHAR},
      toBorrow_days = #{toborrowDays,jdbcType=INTEGER}
    where type_id = #{typeId,jdbcType=INTEGER}
  </update>
  <!--查询书籍类型-->
  <select id="findBookType" resultMap="BaseResultMap">
    select * from book_type_tbl
  </select>
  <!--查询此类型的书籍 还有多少本-->
  <select id="selectBookTypeCount" resultMap="BaseResultMap">
    select * from book_type_tbl bty inner join book_tbl bkt on bty.type_id=bkt.type_id where bty.type_id=#{typeId}
  </select>
  <!--查询此类型是否存在-->
  <select id="selectBookTypeName" resultMap="BaseResultMap">
    select * from book_type_tbl where type_name=#{bookTypeName}
  </select>
</mapper>